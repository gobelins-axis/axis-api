!(function(e, t) { typeof exports === 'object' && typeof module !== 'undefined' ? t(exports) : typeof define === 'function' && define.amd ? define(['exports'], t) : t((e = typeof globalThis !== 'undefined' ? globalThis : e || self).bundle = {}); }(this, function(e) { 'use strict'; function t(e, t) { if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function'); } function n(e, t) { for (let n = 0; n < t.length; n++) { const i = t[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, 'value' in i && (i.writable = !0), Object.defineProperty(e, i.key, i); } } function i(e, t, i) { return t && n(e.prototype, t), i && n(e, i), Object.defineProperty(e, 'prototype', { writable: !1 }), e; } function r(e, t) { if (typeof t !== 'function' && t !== null) throw new TypeError('Super expression must either be null or a function'); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, 'prototype', { writable: !1 }), t && s(e, t); } function o(e) { return o = Object.setPrototypeOf ? Object.getPrototypeOf : function(e) { return e.__proto__ || Object.getPrototypeOf(e); }, o(e); } function s(e, t) { return s = Object.setPrototypeOf || function(e, t) { return e.__proto__ = t, e; }, s(e, t); } function a(e, t) { if (t && (typeof t === 'object' || typeof t === 'function')) return t; if (void 0 !== t) throw new TypeError('Derived constructors may only return object or undefined'); return (function(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }(e)); } function d(e) { const t = (function() { if (typeof Reflect === 'undefined' || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if (typeof Proxy === 'function') return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {})), !0; } catch (e) { return !1; } }()); return function() { let n; const i = o(e); if (t) { const r = o(this).constructor; n = Reflect.construct(i, arguments, r); } else n = i.apply(this, arguments); return a(this, n); }; } const u = (function() { function e() { t(this, e); } return i(e, [{ key: 'addEventListener', value: function(e, t) { void 0 === this._listeners && (this._listeners = {}); const n = this._listeners; void 0 === n[e] && (n[e] = []), n[e].includes(t) || n[e].push(t); } }, { key: 'removeEventListener', value: function(e, t) { if (void 0 !== this._listeners) { const n = this._listeners[e]; if (void 0 !== n) { const i = n.indexOf(t); i !== -1 && n.splice(i, 1); } } } }, { key: 'dispatchEvent', value: function(e, t) { if (void 0 !== this._listeners) { const n = this._listeners[e]; if (void 0 !== n) for (let i = n.slice(0), r = 0, o = i.length; r < o; r++)i[r].call(this, t); } } }]), e; }()); function h(e, t, n) { return clearTimeout(n), n = setTimeout(e, 1e3 * t); } function c(e, t, n) { const i = new Date(); return void 0 === n || i - n >= t ? (e(), i) : n; } const l = { deadzone: 0.1, threshold: 0, inputInactiveDelay: 0.3, inputIntervalMax: 0.5, inputIntervalMin: 0.1 }; function _(e, t, n, i, r) { return (e - t) * (r - i) / (n - t) + i; } function y(e, t) { let n; let i; let r; let o; let s = _(e.x, 0, 1023, -1, 1); let a = -1 * _(e.y, 0, 1023, -1, 1); return (r = (n = { x: s, y: a }).x - (i = { x: 0, y: 0 }).x, o = n.y - i.y, Math.sqrt(r * r + o * o)) < t && (s = 0, a = 0), { x: s, y: a }; } const v = (function(e) { r(o, e); const n = d(o); function o() { let e; const i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; return t(this, o), (e = n.call(this))._id = i.id, e._deadzone = l.deadzone, e._threshold = l.threshold, e._inputInactiveDelay = l.inputInactiveDelay, e._inputIntervalMin = l.inputIntervalMin, e._inputIntervalMax = l.inputIntervalMax, e._ipcRenderer = null, e._position = { x: 0, y: 0 }, e._inputLeftIndex = 0, e._inputRightIndex = 0, e._inputUpIndex = 0, e._inputDownIndex = 0, e._bindAll(), e; } return i(o, [{ key: 'id', get: function() { return this._id; } }, { key: 'ipcRenderer', get: function() { return this._ipcRenderer; }, set: function(e) { this._ipcRenderer = e; } }, { key: 'position', get: function() { return this._position; } }, { key: 'deadzone', get: function() { return this._deadzone; }, set: function(e) { this._deadzone = e; } }, { key: 'threshold', get: function() { return this._threshold; }, set: function(e) { this._threshold = e; } }, { key: 'inputIntervalMin', get: function() { return this._inputIntervalMin; }, set: function(e) { this._inputIntervalMin = e; } }, { key: 'inputIntervalMax', get: function() { return this._inputIntervalMax; }, set: function(e) { this._inputIntervalMax = e; } }, { key: 'moveHandler', value: function(e) { this._position.x = y(e, this._deadzone).x, this._position.y = y(e, this._deadzone).y, this.dispatchEvent('joystick:move', { id: this._id, position: this._position }), this._position.x <= -1 + this._threshold && this._moveLeftHandler(), this._position.x >= 1 - this._threshold && this._moveRightHandler(), this._position.y >= 1 - this._threshold && this._moveUpHandler(), this._position.y <= -1 + this._threshold && this._moveDownHandler(); } }, { key: '_bindAll', value: function() { this._moveLeftHandler = this._moveLeftHandler.bind(this), this._moveLeftThrottledHandler = this._moveLeftThrottledHandler.bind(this), this._moveLeftEndHandler = this._moveLeftEndHandler.bind(this), this._moveRightHandler = this._moveRightHandler.bind(this), this._moveRightThrottledHandler = this._moveRightThrottledHandler.bind(this), this._moveRightEndHandler = this._moveRightEndHandler.bind(this), this._moveUpHandler = this._moveUpHandler.bind(this), this._moveUpThrottledHandler = this._moveUpThrottledHandler.bind(this), this._moveUpEndHandler = this._moveUpEndHandler.bind(this), this._moveDownHandler = this._moveDownHandler.bind(this), this._moveDownThrottledHandler = this._moveDownThrottledHandler.bind(this), this._moveDownEndHandler = this._moveDownEndHandler.bind(this); } }, { key: '_moveLeftHandler', value: function() { const e = this._inputLeftIndex > 1 ? this._inputIntervalMin : this._inputIntervalMax; this._throttleMoveLeft = c(this._moveLeftThrottledHandler, 1e3 * e, this._throttleMoveLeft), this._debounceMoveLeft = h(this._moveLeftEndHandler, this._inputInactiveDelay, this._debounceMoveLeft); } }, { key: '_moveLeftThrottledHandler', value: function() { this._inputLeftIndex++, this.dispatchEvent('joystick:quickmove', { direction: 'left', position: this._position }); } }, { key: '_moveLeftEndHandler', value: function() { this._inputLeftIndex = 0; } }, { key: '_moveRightHandler', value: function() { const e = this._inputRightIndex > 1 ? this._inputIntervalMin : this._inputIntervalMax; this._throttleMoveRight = c(this._moveRightThrottledHandler, 1e3 * e, this._throttleMoveRight), this._debounceMoveRight = h(this._moveRightEndHandler, this._inputInactiveDelay, this._debounceMoveRight); } }, { key: '_moveRightThrottledHandler', value: function() { this._inputRightIndex++, this.dispatchEvent('joystick:quickmove', { direction: 'right', position: this._position }); } }, { key: '_moveRightEndHandler', value: function() { this._inputRightIndex = 0; } }, { key: '_moveUpHandler', value: function() { const e = this._inputUpIndex > 1 ? this._inputIntervalMin : this._inputIntervalMax; this._throttleMoveUp = c(this._moveUpThrottledHandler, 1e3 * e, this._throttleMoveUp), this._debounceMoveUp = h(this._moveUpEndHandler, this._inputInactiveDelay, this._debounceMoveUp); } }, { key: '_moveUpThrottledHandler', value: function() { this._inputUpIndex++, this.dispatchEvent('joystick:quickmove', { direction: 'up', position: this._position }); } }, { key: '_moveUpEndHandler', value: function() { this._inputUpIndex = 0; } }, { key: '_moveDownHandler', value: function() { const e = this._inputDownIndex > 1 ? this._inputIntervalMin : this._inputIntervalMax; this._throttleMoveDown = c(this._moveDownThrottledHandler, 1e3 * e, this._throttleMoveDown), this._debounceMoveDown = h(this._moveDownEndHandler, this._inputInactiveDelay, this._debounceMoveDown); } }, { key: '_moveDownThrottledHandler', value: function() { this._inputDownIndex++, this.dispatchEvent('joystick:quickmove', { direction: 'down', position: this._position }); } }, { key: '_moveDownEndHandler', value: function() { this._inputDownIndex = 0; } }]), o; }(u)); const p = (function() { function e() { t(this, e), this._joystick1 = this._createJoystick1(), this._joystick2 = this._createJoystick2(), this._ipcRenderer = null, this._bindAll(), this._setupIpcRendererEventListeners(); } return i(e, [{ key: 'ipcRenderer', get: function() { return this._ipcRenderer; }, set: function(e) { this._ipcRenderer = e, this._setupIpcRendererEventListeners(); } }, { key: 'joystick1', get: function() { return this._joystick1; } }, { key: 'joystick2', get: function() { return this._joystick2; } }, { key: 'destroy', value: function() { this._removeIpcRendererEventListeners(); } }, { key: '_createJoystick1', value: function() { return new v({ id: 1 }); } }, { key: '_createJoystick2', value: function() { return new v({ id: 2 }); } }, { key: '_bindAll', value: function() { this._joystickMoveHandler = this._joystickMoveHandler.bind(this); } }, { key: '_setupIpcRendererEventListeners', value: function() { this._ipcRenderer && this._ipcRenderer.on('joystick:move', this._joystickMoveHandler); } }, { key: '_removeIpcRendererEventListeners', value: function() { this._ipcRenderer && this._ipcRenderer.removeListener('joystick:move', this._joystickMoveHandler); } }, { key: '_joystickMoveHandler', value: function(e, t) { t.id === 1 && this._joystick1.moveHandler(t.position); } }]), e; }()); const k = (function(e) { r(o, e); const n = d(o); function o() { let e; const i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; return t(this, o), (e = n.call(this))._id = i.id, e._key = i.key, e._keyboardKeys = [], e; } return i(o, [{ key: 'id', get: function() { return this._id; } }, { key: 'key', get: function() { return this._key; } }, { key: 'keyboardKeys', get: function() { return this._keyboardKeys; }, set: function(e) { this._keyboardKeys = e; } }, { key: 'keydownHandler', value: function(e) { this.dispatchEvent('keydown', { key: this._key, id: this._id, instance: this, originalEvent: e }); } }, { key: 'keyupHandler', value: function(e) { this.dispatchEvent('keyup', { key: this._key, id: this._id, instance: this, originalEvent: e }); } }]), o; }(u)); const f = { buttons: [{ key: 'a', id: 1 }, { key: 'b', id: 1 }, { key: 'c', id: 1 }, { key: 'd', id: 1 }, { key: 'e', id: 1 }, { key: 'a', id: 2 }, { key: 'b', id: 2 }, { key: 'c', id: 2 }, { key: 'd', id: 2 }, { key: 'e', id: 2 }], joystick: l }; const m = (function() { function e() { t(this, e), this._buttons = this._createButtons(), this._ipcRenderer = null, this._bindAll(), this._setupEventListeners(); } return i(e, [{ key: 'ipcRenderer', get: function() { return this._ipcRenderer; }, set: function(e) { this._ipcRenderer = e, this._setupIpcRendererEventListeners(); } }, { key: 'destroy', value: function() { this._removeEventListeners(), this._removeIpcRendererEventListeners(); } }, { key: 'registerKeys', value: function(e, t, n) { let i; const r = this.getButton(t, n); return r && (r.keyboardKeys = (i = e, Array.isArray(i) ? i : [i])), r; } }, { key: 'getButton', value: function(e, t) { return this._buttons.filter(function(n) { return n.key === e && n.id === t; })[0]; } }, { key: 'getButtonsById', value: function(e) { return this._buttons.filter(function(t) { return t.id === e; }); } }, { key: 'getButtonsByKeyboardKey', value: function(e) { return this._buttons.filter(function(t) { return t.keyboardKeys.includes(e); }); } }, { key: '_createButtons', value: function() { for (var e = [], t = 0; t < f.buttons.length; t++) { const n = new k({ id: f.buttons[t].id, key: f.buttons[t].key }); e.push(n); } return e; } }, { key: '_bindAll', value: function() { this._keydownHandler = this._keydownHandler.bind(this), this._keyupHandler = this._keyupHandler.bind(this), this._machineKeydownHandler = this._machineKeydownHandler.bind(this), this._machineKeyupHandler = this._machineKeyupHandler.bind(this); } }, { key: '_setupEventListeners', value: function() { window.addEventListener('keydown', this._keydownHandler), window.addEventListener('keyup', this._keyupHandler); } }, { key: '_removeEventListeners', value: function() { window.removeEventListener('keydown', this._keydownHandler), window.removeEventListener('keyup', this._keyupHandler); } }, { key: '_setupIpcRendererEventListeners', value: function() { this._ipcRenderer && (this._ipcRenderer.on('keydown', this._machineKeydownHandler), this._ipcRenderer.on('keyup', this._machineKeyupHandler)); } }, { key: '_removeIpcRendererEventListeners', value: function() { this._ipcRenderer && (this._ipcRenderer.removeListener('keydown', this._machineKeydownHandler), this._ipcRenderer.removeListener('keyup', this._machineKeyupHandler)); } }, { key: '_keydownHandler', value: function(e) { for (let t = this.getButtonsByKeyboardKey(e.key), n = 0; n < t.length; n++)t[n].keydownHandler(e); } }, { key: '_keyupHandler', value: function(e) { for (let t = this.getButtonsByKeyboardKey(e.key), n = 0; n < t.length; n++)t[n].keyupHandler(e); } }, { key: '_machineKeydownHandler', value: function(e, t) {} }, { key: '_machineKeyupHandler', value: function(e, t) {} }]), e; }()); const H = (function(e) { r(o, e); const n = d(o); function o() { let e; const i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; return t(this, o), (e = n.call(this))._id = i.id, e._joystick = i.joystick, e._buttons = i.buttons, e._bindAll(), e._setupEventListeners(), e; } return i(o, [{ key: 'joystick', get: function() { return this._joystick; }, set: function(e) { this._joystick = e; } }, { key: 'buttons', get: function() { return this._buttons; }, set: function(e) { this._removeEventListeners(), this._buttons = e, this._setupEventListeners(); } }, { key: 'destroy', value: function() { this._removeEventListeners(); } }, { key: '_bindAll', value: function() { this._keydownHandler = this._keydownHandler.bind(this), this._keyupHandler = this._keyupHandler.bind(this), this._joystickMoveHandler = this._joystickMoveHandler.bind(this), this._joystickQuickmoveHandler = this._joystickQuickmoveHandler.bind(this); } }, { key: '_setupEventListeners', value: function() { this._joystick.addEventListener('joystick:move', this._joystickMoveHandler), this._joystick.addEventListener('joystick:quickmove', this._joystickQuickmoveHandler); for (let e = 0; e < this._buttons.length; e++) this._buttons[e].addEventListener('keydown', this._keydownHandler), this._buttons[e].addEventListener('keyup', this._keyupHandler); } }, { key: '_removeEventListeners', value: function() { this._joystick.removeEventListener('joystick:move', this._joystickMoveHandler), this._joystick.removeEventListener('joystick:quickmove', this._joystickQuickmoveHandler); for (let e = 0; e < this._buttons.length; e++) this._buttons[e].removeEventListener('keydown', this._keydownHandler), this._buttons[e].removeEventListener('keyup', this._keyupHandler); } }, { key: '_keydownHandler', value: function(e) { this.dispatchEvent('keydown', e); } }, { key: '_keyupHandler', value: function(e) { this.dispatchEvent('keyup', e); } }, { key: '_joystickMoveHandler', value: function(e) { this.dispatchEvent('joystick:move', e); } }, { key: '_joystickQuickmoveHandler', value: function(e) { this.dispatchEvent('joystick:quickmove', e); } }]), o; }(u)); const b = (function() { function e() { const n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; t(this, e), this._joystickManager = n.joystickManager, this._buttonManager = n.buttonManager, this._player1 = this._createPlayer1(), this._player2 = this._createPlayer2(); } return i(e, [{ key: 'player1', get: function() { return this._player1; } }, { key: 'player2', get: function() { return this._player2; } }, { key: 'destroy', value: function() {} }, { key: '_createPlayer1', value: function() { return new H({ id: 1, joystick: this._joystickManager.joystick1, buttons: this._buttonManager.getButtonsById(1) }); } }, { key: '_createPlayer2', value: function() { return new H({ id: 2, joystick: this._joystickManager.joystick2, buttons: this._buttonManager.getButtonsById(2) }); } }]), e; }()); const g = new (function(e) { r(o, e); const n = d(o); function o() { let e; return t(this, o), (e = n.call(this))._ipcRenderer = null, e._joystickManager = e._createJoystickManager(), e._buttonManager = e._createButtonManager(), e._playerManager = e._createPlayerManager(), e._bindAll(), e._exposeMethods(), e._setupIpcRendererEventListeners(), e; } return i(o, [{ key: 'mappedKeys', get: function() { return this._mappedKeys; } }, { key: 'ipcRenderer', get: function() { return this._ipcRenderer; } }, { key: 'joystick1', get: function() { return this._joystickManager.joystick1; } }, { key: 'joystick2', get: function() { return this._joystickManager.joystick2; } }, { key: 'player1', get: function() { return this._playerManager.player1; } }, { key: 'player2', get: function() { return this._playerManager.player2; } }, { key: 'start', value: function() {} }, { key: 'destroy', value: function() { this._removeIpcRendererEventListeners(), this._ipcRenderer = null; } }, { key: 'registerKeys', value: function(e, t, n) { return this._buttonManager.registerKeys(e, t, n); } }, { key: '_exposeMethods', value: function() { window.__arcade__ = {}, window.__arcade__.set_ipc_renderer = this._setIpcRenderer; } }, { key: '_setIpcRenderer', value: function(e) { this._ipcRenderer || (this._ipcRenderer = e, this._buttonManager.ipcRenderer = this._ipcRenderer, this._joystickManager.ipcRenderer = this._ipcRenderer, this._setupIpcRendererEventListeners()); } }, { key: '_createJoystickManager', value: function() { return new p(); } }, { key: '_createButtonManager', value: function() { return new m(); } }, { key: '_createPlayerManager', value: function() { return new b({ joystickManager: this._joystickManager, buttonManager: this._buttonManager }); } }, { key: '_bindAll', value: function() { this._setIpcRenderer = this._setIpcRenderer.bind(this), this._machineExitAttemptHandler = this._machineExitAttemptHandler.bind(this), this._machineExitCanceledHandler = this._machineExitCanceledHandler.bind(this), this._machineExitCompletedHandler = this._machineExitCompletedHandler.bind(this); } }, { key: '_setupIpcRendererEventListeners', value: function() { this._ipcRenderer && (this._ipcRenderer.on('exit:attempted', this._machineExitAttemptHandler), this._ipcRenderer.on('exit:canceled', this._machineExitCanceledHandler), this._ipcRenderer.on('exit:completed', this._machineExitCompletedHandler)); } }, { key: '_removeIpcRendererEventListeners', value: function() { this._ipcRenderer && (this._ipcRenderer.removeListener('exit:attempted', this._machineExitAttemptHandler), this._ipcRenderer.removeListener('exit:canceled', this._machineExitCanceledHandler), this._ipcRenderer.removeListener('exit:completed', this._machineExitCompletedHandler)); } }, { key: '_machineExitAttemptHandler', value: function() { this.dispatchEvent('exit:attempted'); } }, { key: '_machineExitCanceledHandler', value: function() { this.dispatchEvent('exit:canceled'); } }, { key: '_machineExitCompletedHandler', value: function() { this.dispatchEvent('exit:completed'); } }]), o; }(u))(); e.Arcade = g, e.default = g, e.normalizeJoystickSignal = y, Object.defineProperty(e, '__esModule', { value: !0 }); }));
